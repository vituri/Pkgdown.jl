---
engine: julia
---

# findprev
    

```{julia}
#| eval: false
findprev(A, i)

```


Find the previous index before or including `i` of a `true` element of `A`, or `nothing` if not found.
 

Indices are of the same type as those returned by [`keys(A)`](@ref) and [`pairs(A)`](@ref).
 

See also: [`findnext`](@ref), [`findfirst`](@ref), [`findall`](@ref).
 


### Examples
    


```{julia}
#| eval: false
julia> A = [false, false, true, true]
4-element Vector{Bool}:
 0
 0
 1
 1

julia> findprev(A, 3)
3

julia> findprev(A, 1) # returns nothing, but not printed in the REPL

julia> A = [false false; true true]
2×2 Matrix{Bool}:
 0  0
 1  1

julia> findprev(A, CartesianIndex(2, 1))
CartesianIndex(2, 1)

```


 --- 
 
```{julia}
#| eval: false
findprev(predicate::Function, A, i)

```


Find the previous index before or including `i` of an element of `A` for which `predicate` returns `true`, or `nothing` if not found.
 

Indices are of the same type as those returned by [`keys(A)`](@ref) and [`pairs(A)`](@ref).
 


### Examples
    


```{julia}
#| eval: false
julia> A = [4, 6, 1, 2]
4-element Vector{Int64}:
 4
 6
 1
 2

julia> findprev(isodd, A, 1) # returns nothing, but not printed in the REPL

julia> findprev(isodd, A, 3)
3

julia> A = [4 6; 1 2]
2×2 Matrix{Int64}:
 4  6
 1  2

julia> findprev(isodd, A, CartesianIndex(1, 2))
CartesianIndex(2, 1)

```


 --- 
 
```{julia}
#| eval: false
findprev(pattern::AbstractString, string::AbstractString, start::Integer)

```


Find the previous occurrence of `pattern` in `string` starting at position `start`.
 

The return value is a range of indices where the matching sequence is found, such that `s[findprev(x, s, i)] == x`:
 

`findprev("substring", string, i)` == `start:stop` such that `string[start:stop] == "substring"` and `stop <= i`, or `nothing` if unmatched.
 


### Examples
    


```{julia}
#| eval: false
julia> findprev("z", "Hello to the world", 18) === nothing
true

julia> findprev("o", "Hello to the world", 18)
15:15

julia> findprev("Julia", "JuliaLang", 6)
1:5

```


 --- 
 
```{julia}
#| eval: false
findprev(ch::AbstractChar, string::AbstractString, start::Integer)

```


Find the previous occurrence of character `ch` in `string` starting at position `start`.
 

!!! compat "Julia 1.3"
    This method requires at least Julia 1.3.



### Examples
    


```{julia}
#| eval: false
julia> findprev('z', "Hello to the world", 18) === nothing
true

julia> findprev('o', "Hello to the world", 18)
15

```


 --- 
 
```{julia}
#| eval: false
findprev(pattern::AbstractVector{<:Union{Int8,UInt8}},
         A::AbstractVector{<:Union{Int8,UInt8}},
         start::Integer)

```


Find the previous occurrence of the sequence `pattern` in vector `A` starting at position `start`.
 

!!! compat "Julia 1.6"
    This method requires at least Julia 1.6.



### Examples
    


```{julia}
#| eval: false
julia> findprev([0x52, 0x62], [0x40, 0x52, 0x62, 0x52, 0x62], 3)
2:3

```


